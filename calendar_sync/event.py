"""
Event classes for calendar management.
"""

from datetime import datetime
from typing import Dict, Any, Optional


class Event:
    """Base class for calendar events."""
    
    def __init__(
        self, 
        title: str, 
        start_time: datetime, 
        end_time: datetime, 
        description: str = "",
        location: str = "",
        timezone: str = "America/Mexico_City"
    ):
        """
        Initialize an event.
        
        Args:
            title: Event title
            start_time: Start datetime
            end_time: End datetime
            description: Event description
            location: Event location
            timezone: Event timezone
        """
        self.title = title
        self.start_time = start_time
        self.end_time = end_time
        self.description = description
        self.location = location
        self.timezone = timezone
        self.event_id: Optional[str] = None
        self.html_link: Optional[str] = None
    
    def to_google_calendar_format(self) -> Dict[str, Any]:
        """
        Convert event to Google Calendar API format.
        
        Returns:
            Dictionary with Google Calendar event format
        """
        event_data = {
            'summary': self.title,
            'description': self.description,
            'start': {
                'dateTime': self.start_time.isoformat(),
                'timeZone': self.timezone,
            },
            'end': {
                'dateTime': self.end_time.isoformat(),
                'timeZone': self.timezone,
            },
        }
        
        if self.location:
            event_data['location'] = self.location
            
        return event_data
    
    def __str__(self) -> str:
        return f"{self.title} ({self.start_time} - {self.end_time})"
    
    def __repr__(self) -> str:
        return f"Event(title='{self.title}', start='{self.start_time}', end='{self.end_time}')"


class AppointmentEvent(Event):
    """Specialized event class for business appointments."""
    
    def __init__(
        self,
        client_name: str,
        phone_number: str,
        service_type: str,
        start_time: datetime,
        end_time: datetime,
        additional_notes: str = "",
        timezone: str = "America/Mexico_City"
    ):
        """
        Initialize a business appointment.
        
        Args:
            client_name: Client's name
            phone_number: Client's phone number
            service_type: Type of service requested
            start_time: Appointment start time
            end_time: Appointment end time
            additional_notes: Additional notes
            timezone: Appointment timezone
        """
        # Create formatted title and description
        title = f"Appointment - {client_name}"
        description = self._create_appointment_description(
            client_name, phone_number, service_type, additional_notes
        )
        
        super().__init__(
            title=title,
            start_time=start_time,
            end_time=end_time,
            description=description,
            timezone=timezone
        )
        
        # Store appointment-specific data
        self.client_name = client_name
        self.phone_number = phone_number
        self.service_type = service_type
        self.additional_notes = additional_notes
    
    def _create_appointment_description(
        self, 
        client_name: str, 
        phone_number: str, 
        service_type: str, 
        additional_notes: str
    ) -> str:
        """
        Create formatted description for appointment.
        
        Args:
            client_name: Client's name
            phone_number: Client's phone number
            service_type: Type of service
            additional_notes: Additional notes
            
        Returns:
            Formatted description string
        """
        return f"""📋 APPOINTMENT INFORMATION

👤 Client: {client_name}
📞 Phone: {phone_number}
🛠️ Service: {service_type}

📝 Additional notes:
{additional_notes if additional_notes else 'No additional notes'}

---
Appointment automatically generated by booking system"""
    
    def to_google_calendar_format(self) -> Dict[str, Any]:
        """
        Convert appointment to Google Calendar API format with business styling.
        
        Returns:
            Dictionary with Google Calendar event format
        """
        event_data = super().to_google_calendar_format()
        
        # Add business appointment color (blue)
        event_data['colorId'] = '9'
        
        return event_data
    
    def update_notes(self, new_notes: str) -> None:
        """
        Update appointment notes and refresh description.
        
        Args:
            new_notes: New additional notes
        """
        self.additional_notes = new_notes
        self.description = self._create_appointment_description(
            self.client_name, self.phone_number, self.service_type, new_notes
        )
    
    def __repr__(self) -> str:
        return f"AppointmentEvent(client='{self.client_name}', service='{self.service_type}', start='{self.start_time}')"